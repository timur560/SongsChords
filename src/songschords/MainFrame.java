/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package songschords;

import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Toolkit;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Map;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JEditorPane;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JScrollBar;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.Element;
import javax.swing.text.html.HTML;
import javax.swing.text.html.HTMLDocument;
import javax.swing.tree.*;

/**
 *
 * @author qwer
 */
public class MainFrame extends javax.swing.JFrame {

    public final SongEditorFrame songEditor;
    public static final HelpFrame helpFrame = new HelpFrame();;
    private String author, title;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        
        updateSongsTree();
        
        songsTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        
        songsTree.addTreeSelectionListener(new TreeSelectionListener() {
            @Override
            public void valueChanged(TreeSelectionEvent tse) {
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) songsTree.getLastSelectedPathComponent();
                if (node != null && node.getLevel() == 2) {
                    editButton.setEnabled(true); removeButton.setEnabled(true);
                    
                    DefaultMutableTreeNode parentNode = (DefaultMutableTreeNode) node.getParent();
                    author = parentNode.toString();
                    title = node.toString();
                    updateSongText();
//                    songTextScrollPane.getVerticalScrollBar().setValue(0);
//                    System.out.println(songTextScrollPane.getVerticalScrollBar().getValue());
                } else {
                    editButton.setEnabled(false); removeButton.setEnabled(false);
                }
            }
        });

        songEditor = new SongEditorFrame(this);

        resetSongTextPane();

        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width / 2 - this.getSize().width / 2, dim.height / 2 - this.getSize().height / 2);
    }
    
    public void updateSongText() {
        if (!SongsProcessor.getSongTextByAuthorAndTitle(author, title).isEmpty()) {
            songTextPane.setText(SongsProcessor.songText2Html(SongsProcessor.getSongTextByAuthorAndTitle(author, title)));
        } else {
            resetSongTextPane();
        }
    }
    
    public final void resetSongTextPane() {
        songTextPane.setText(SongsProcessor.getHtmlHeader() + "Select song or add your own" + SongsProcessor.HTML_FOOTER);
    }
    
    public final void updateSongsTree() {
        Map<String, Map<String, String[]>> songs = SongsProcessor.getSongs(true);
        
        DefaultTreeModel songsTreeModel = (DefaultTreeModel) songsTree.getModel();
        
        DefaultMutableTreeNode top = new DefaultMutableTreeNode("Songs chords");

        DefaultMutableTreeNode authorNode;
        
        for (String author : songs.keySet()) {
            authorNode = new DefaultMutableTreeNode(author);

            for (String title : songs.get(author).keySet()) {
                authorNode.add(new DefaultMutableTreeNode(title));
            }

            top.add(authorNode);
        }
        
        songsTreeModel.setRoot(top);
        
        resetSongTextPane();
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        songsTreePopup = new javax.swing.JPopupMenu();
        editMenuItemPopup = new javax.swing.JMenuItem();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        songsTree = new javax.swing.JTree();
        jToolBar1 = new javax.swing.JToolBar();
        addButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        songTextScrollPane = new javax.swing.JScrollPane();
        songTextPane = new javax.swing.JEditorPane();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        stopButton = new javax.swing.JButton();
        playButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        speedBox = new javax.swing.JComboBox();
        fontSizeBox = new javax.swing.JComboBox();
        chordSchemePanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        newSongMenuItem = new javax.swing.JMenuItem();
        importMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        quitMenuItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        helpMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        editMenuItemPopup.setText("Edit...");
        editMenuItemPopup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editMenuItemPopupActionPerformed(evt);
            }
        });
        songsTreePopup.add(editMenuItemPopup);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Songs Chords");
        setPreferredSize(new java.awt.Dimension(800, 600));

        jSplitPane1.setDividerLocation(220);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        songsTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        songsTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                songsTreeMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(songsTree);

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        addButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/add.png"))); // NOI18N
        addButton.setFocusable(false);
        addButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(addButton);

        editButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/modify.png"))); // NOI18N
        editButton.setEnabled(false);
        editButton.setFocusable(false);
        editButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        editButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(editButton);

        removeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/delete.png"))); // NOI18N
        removeButton.setEnabled(false);
        removeButton.setFocusable(false);
        removeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        removeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(removeButton);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 516, Short.MAX_VALUE))
        );

        jSplitPane1.setLeftComponent(jPanel1);

        songTextPane.setEditable(false);
        songTextPane.setContentType("text/html"); // NOI18N
        songTextPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                songTextPaneMouseReleased(evt);
            }
        });
        songTextScrollPane.setViewportView(songTextPane);

        jLabel1.setText("Speed:");

        stopButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/stop.png"))); // NOI18N
        stopButton.setFocusable(false);
        stopButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        stopButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        playButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/play.png"))); // NOI18N
        playButton.setFocusable(false);
        playButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        playButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Font size:");

        speedBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));
        speedBox.setSelectedIndex(4);

        fontSizeBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "10", "12", "14", "16", "18", "20", "22", "24", "26" }));
        fontSizeBox.setSelectedIndex(1);
        fontSizeBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fontSizeBoxActionPerformed(evt);
            }
        });

        chordSchemePanel.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout chordSchemePanelLayout = new javax.swing.GroupLayout(chordSchemePanel);
        chordSchemePanel.setLayout(chordSchemePanelLayout);
        chordSchemePanelLayout.setHorizontalGroup(
            chordSchemePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        chordSchemePanelLayout.setVerticalGroup(
            chordSchemePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jLabel3.setText("Chord scheme:");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(chordSchemePanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(21, 21, 21)))
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(playButton, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(stopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(speedBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(fontSizeBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(stopButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(playButton, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(speedBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fontSizeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 246, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chordSchemePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(songTextScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(songTextScrollPane)
        );

        jSplitPane1.setRightComponent(jPanel2);

        jMenu1.setText("File");

        newSongMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newSongMenuItem.setText("New Song...");
        newSongMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newSongMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(newSongMenuItem);

        importMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        importMenuItem.setText("Import...");
        importMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(importMenuItem);
        jMenu1.add(jSeparator1);

        quitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        quitMenuItem.setText("Quit");
        quitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(quitMenuItem);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("About");

        helpMenuItem.setText("Help...");
        helpMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(helpMenuItem);

        aboutMenuItem.setText("About...");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(aboutMenuItem);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newSongMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newSongMenuItemActionPerformed
        songEditor.newSong();
    }//GEN-LAST:event_newSongMenuItemActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        JOptionPane.showMessageDialog(this, "by timur560\n(c)2014", "About", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private int treeX = 0, treeY = 0;
    
    private void songsTreeMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_songsTreeMousePressed
        treeX = evt.getX();
        treeY = evt.getY();
        songsTree.getPathForLocation(treeX, treeY);
        if (evt.isPopupTrigger() && songsTree.getPathForLocation(treeX, treeY).getPathCount() == 3) {
            songsTreePopup.show(songsTree, treeX, treeY);
            songsTree.setSelectionPath(songsTree.getPathForLocation(treeX, treeY));
        }
    }//GEN-LAST:event_songsTreeMousePressed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        songEditor.newSong();
    }//GEN-LAST:event_addButtonActionPerformed

    private void editMenuItemPopupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editMenuItemPopupActionPerformed
        if (songsTree.getPathForLocation(treeX, treeY).getPathCount() == 3) {
            songEditor.show(
                songsTree.getPathForLocation(treeX, treeY).getPathComponent(1).toString(),
                songsTree.getPathForLocation(treeX, treeY).getPathComponent(2).toString(),
                true
            );
        }
        
    }//GEN-LAST:event_editMenuItemPopupActionPerformed

    private void quitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitMenuItemActionPerformed
        if (JOptionPane.showConfirmDialog(this, "Sure quit?", "Quit", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }//GEN-LAST:event_quitMenuItemActionPerformed

    private void fontSizeBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fontSizeBoxActionPerformed
        SongsProcessor.FONT_SIZE = Integer.parseInt(fontSizeBox.getSelectedItem().toString());
        updateSongText();
    }//GEN-LAST:event_fontSizeBoxActionPerformed

    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
        timer = new java.util.Timer();
        timer.schedule(new ScrollSongDown(), (11 - Integer.parseInt(speedBox.getSelectedItem().toString())) * 100); // 1 sec
    }//GEN-LAST:event_playButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        timer.cancel();
        timer.purge();
    }//GEN-LAST:event_stopButtonActionPerformed

    private void songTextPaneMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_songTextPaneMouseReleased
        try {
            Element el = getHyperlinkElement(evt);
            if (el != null) {
                Document doc = el.getDocument();
                String chord = doc.getText(el.getStartOffset() , el.getEndOffset() - el.getStartOffset());
                drawChord(chord);
            }
        } catch (BadLocationException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_songTextPaneMouseReleased

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        if (JOptionPane.showConfirmDialog(
                this, 
                "Delete song \"" + author + " - " + title + "\"?", 
                "Confirm", 
                JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            SongsProcessor.removeSong(author, title);
            updateSongsTree();
        }
    }//GEN-LAST:event_removeButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) songsTree.getLastSelectedPathComponent();
        DefaultMutableTreeNode parentNode = (DefaultMutableTreeNode) node.getParent();
        songEditor.show(parentNode.toString(), node.toString(), true);
    }//GEN-LAST:event_editButtonActionPerformed

    private void helpMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpMenuItemActionPerformed
        helpFrame.setVisible(true);
    }//GEN-LAST:event_helpMenuItemActionPerformed

    private void importMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importMenuItemActionPerformed
        JFileChooser fc = new JFileChooser();
        int returnVal = fc.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            if (!SongsProcessor.importFile(fc.getSelectedFile())) {
                JOptionPane.showMessageDialog(this, "Cannot import file", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                updateSongsTree();
            }
        }
    }//GEN-LAST:event_importMenuItemActionPerformed
    
    private void drawChord(String chord) {
        try {
            BufferedImage chordImage = SongsProcessor.getChordImage(chord);
            
            if (chordImage != null) {
                Graphics2D g2 = (Graphics2D) chordSchemePanel.getGraphics();

                g2.drawImage(
                        chordImage,
                        chordSchemePanel.getWidth() / 2 - 35, 
                        chordSchemePanel.getHeight() / 2 - 40, 
                        null);
            }
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private Element getHyperlinkElement(MouseEvent event) {
        JEditorPane editor = (JEditorPane) event.getSource();
        int pos = editor.getUI().viewToModel(editor, event.getPoint());
        if (pos >= 0 && editor.getDocument() instanceof HTMLDocument) {
            HTMLDocument hdoc = (HTMLDocument) editor.getDocument();
            Element elem = hdoc.getCharacterElement(pos);
            if (elem.getAttributes().getAttribute(HTML.Tag.A) != null) {
                return elem;
            }
        }
        return null;
    }
    java.util.Timer timer = new java.util.Timer();

    class ScrollSongDown extends TimerTask
    {
        @Override
        public void run() {
            JScrollBar scrollBar = songTextScrollPane.getVerticalScrollBar();
            scrollBar.setValue(scrollBar.getValue() + 3);
            timer.schedule(new ScrollSongDown(), (11 - Integer.parseInt(speedBox.getSelectedItem().toString())) * 100); // 1 sec
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JButton addButton;
    private javax.swing.JPanel chordSchemePanel;
    private javax.swing.JButton editButton;
    private javax.swing.JMenuItem editMenuItemPopup;
    private javax.swing.JComboBox fontSizeBox;
    private javax.swing.JMenuItem helpMenuItem;
    private javax.swing.JMenuItem importMenuItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JMenuItem newSongMenuItem;
    private javax.swing.JButton playButton;
    private javax.swing.JMenuItem quitMenuItem;
    private javax.swing.JButton removeButton;
    private javax.swing.JEditorPane songTextPane;
    private javax.swing.JScrollPane songTextScrollPane;
    private javax.swing.JTree songsTree;
    private javax.swing.JPopupMenu songsTreePopup;
    private javax.swing.JComboBox speedBox;
    private javax.swing.JButton stopButton;
    // End of variables declaration//GEN-END:variables
}
